Github-Connect-Notes
08/08/23


Git Commands

#list files in git branch
git checkout -b branch_name
git ls-files







***********************************************************

---- One Computer, Multiple Github Accounts ---

How to Work With GitHub and Multiple Accounts
Reference: https://code.tutsplus.com/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574t

--Create a New SSH Key--

ssh-keygen -t rsa -b 4096 -C "davids@laborlawcenter.com"
--AND--
ssh-keygen -t rsa -b 4096 -C "swingcoding@gmail.com" Bit + L4 + 26


--Generating public/private rsa key pair--
--> Enter file in which to save the key (/home/vaati/.ssh/id_rsa):


Note: Be careful that you don't overwrite your existing key for your default personal account. Instead, when prompted, save the file as id_rsa_COMPANY.
I've saved the file to ~/.ssh/id_rsa_llc.


--Prompt to Enter Phrase--
--> Enter passphrase (empty for no passphrase):
--> Reenter Passphrase


Note: Once you enter the passphrase again, the key is saved in the default location you specified, and two files are created as shown below.

--Your identification has been saved--
-->  /home/vaati/.ssh/id_rsa_llc


--Your public key has been saved--
-->  /home/vaati/.ssh/id_rsa_work.pub

--Example--
The key fingerprint is: SHA256:PLusNPF6nf5e2jr/z57EB1gl5YW43Tw55TPqhTu4z3g dummy8@gmail.com
The key's randomart image is:
+---[RSA 4096]----+
| ..o+|
| . .+o|
| o.++|
| . .o.*+|
| . S . + =|
| o o o.o |
| o o. .o +o.|
| . +..o.+E..o|
| ooo..=O*++*|
+----[SHA256]-----+ 


--View Saved Key--
--> cat .ssh/id_rsa_work.pub

--Next Step--
Login GitHub account, click on the drop-down next to the profile picture at the top right, select Settings, and click on SSH and GPG keys.
---> Add New SSH Keys


--Add the SSH Key to the Agent--
Note: Next, because we saved our key with a unique name, we need to tell SSH about it. In the Terminal, 
--> ssh-add ~/.ssh/id_rsa_llc
Congrats: If successful, you'll see a response of Identity Added.


$ ssh-add ~/.ssh/id_rsa_llc
Enter passphrase for /home/vaati/.ssh/id_rsa_work: 
Identity added: /home/vaati/.ssh/id_rsa_work (dummy85@gmail.com)


Note: We now have two sets of SSH keys in our machine. They reside in the .ssh directory, and you can view them.

vaati@vaati-Yoga-9-14ITL5:~$ cd .ssh
vaati@vaati-Yoga-9-14ITL5:~/.ssh$ ls
config  id_rsa  id_rsa.pub  id_rsa_work  id_rsa_work.pub  known_hosts  known_hosts.old

Create a Config File
--> We've done the bulk of the workload, but now we need a way to specify when we wish to push to our personal account and when we should instead push to our company account. To do so, let's create a config file.


touch ~/.ssh/config
vim config
--> Open File 


--Paste in the following snippet--

#Default GitHub
Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa



Note: This is the default setup for pushing to our personal GitHub account. Notice that we're able to attach an identity file to the host. Let's add another one for the company account. Directly below the code above, add:


Host github.com-work
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_llc


Note: The config file should now look like the following


#Default GitHub
Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa
Host github.com-work
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_work


--TEST --> Try It Out!


--Next Step--
Create a test directory, and add a test.txt file.

mkdir TEST
cd TEST
touch test.txt


--Initialize git and create the first commit--

git init
git add .
git commit -m "first commit'


--Next Step--
Login --> company account, create a new repository, and give it the name test_repository. Once the new repository is created, GitHub provides you with some next steps, as shown below.


Note: Since we already have an existing repository on the command line, we only need to add and push changes. This time, rather than pushing to git@github.com, we're using the custom host we created in the config file: git@github.com-llc.


--Use--
--> git@github.com-work

--Instead of --
--> git@github.com 

--Push Changes--
--> git remote add origin git@github.com-llc:kaththy/Test.git

git push origin main


=====================================================
https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html



git pull <REMOTE>




































//EOF